use sql_course;

show tables
select * from employees
drop table employees

-- Employees Table
CREATE TABLE Employees (
    Emp_ID INT PRIMARY KEY,
    Emp_Name VARCHAR(50),
    Dept_ID INT
);

truncate Employees
INSERT INTO Employees VALUES
(1, 'Alice', 101),
(2, 'Bob', 102),
(3, 'Charlie', NULL),
(4, 'David', 104),
(5, 'Eve', 105)
-- (6, 'Alice', 101),
-- (7, 'Bob', 102),
-- (8, 'Charlie', NULL),
-- (9, 'David', 104),
-- (10, 'Eve', 105);

-- Departments Table
CREATE TABLE Departments (
    Dept_ID INT PRIMARY KEY,
    Dept_Name VARCHAR(50)
);

truncate Departments

INSERT INTO Departments VALUES
(101, 'HR'),
(102, 'IT'),
(103, 'Finance'),
(106, 'Marketing')
-- (105, 'HR'),
-- (104, 'IT'),
-- (107, 'Finance'),
-- (108, 'Marketing');


select * from employees;
select  * from Departments; 

-- Left join ( All records from left + match from right ) 
select Emp_id,Emp_Name,emp.Dept_ID,Dept_Name
from employees as emp
left join Departments as dep 
on dep.Dept_ID = emp.Dept_ID ;

select emp.Emp_id,emp.Emp_Name,dep.Dept_Name,dep.Dept_ID
from employees as emp
left join Departments as dep 
on dep.Dept_ID = emp.Dept_ID 
where emp.Dept_ID is null

-- Right join ( All records from right + match from left )

select * from employees;
select  * from Departments; 

 
select Emp_id,Emp_Name,Dept_Name, dep.Dept_ID
from employees as emp
right join Departments as dep 
on dep.Dept_ID = emp.Dept_ID;

select emp.Emp_id,emp.Emp_Name,dep.Dept_Name,emp.Dept_ID
from employees as emp
right join Departments as dep 
on dep.Dept_ID = emp.Dept_ID 


-- Inner join ( All records match from both table ) 

select * from employees;
select  * from Departments; 


select emp.*,dep.*
from employees as emp 
inner join Departments as dep 
on dep.Dept_ID = emp.Dept_ID

create table if not exists Orders (
order_id int primary key,
customer_id varchar(30),
product_id varchar(30),
quantity int,
order_date datetime
)

insert into Orders(order_id,customer_id,product_id,quantity,order_date)
values(1001,1,101,2,'2024-12-01'),
(1002,2,103,1,'2024-12-03'),
(1003,1,102,3,'2024-12-05'),
(1004,3,104,1,'2024-12-06'),
(1005,5,105,2,'2024-12-07')


-- Create Products Table
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2)
);

-- Insert Values into Products
INSERT INTO Products (product_id, product_name, price) VALUES
(101, 'Wireless Mouse', 25.99),
(102, 'USB-C Cable', 9.99),
(103, 'Mechanical Keyboard', 89.99),
(104, 'Monitor 24"', 149.99),
(105, 'Laptop Stand', 29.99);

CREATE TABLE Customers (
    Customer_id INT PRIMARY KEY,
    Name VARCHAR(50),
    Email VARCHAR(50),
    City VARCHAR(30)
);

truncate Customers;
INSERT INTO Customers (Customer_id, Name, Email, City)
VALUES(1, 'Alice', 'alice@example.com', 'New York'),
(2, 'Bob', 'bob@example.com', 'Chicago'),
(3, 'Charlie', 'charlie@xyz.com', 'San Diego'),
(4, 'Diana', 'diana@abc.com', 'Boston'),
(5, 'Evan', 'evan@domain.com', 'Austin');
 
 
 
 -- 
 select * from Customers ;
 select * from Products; 
 select * from orders;
 

select * from Customers ;
select * from orders;

select cus.* , o.*
from Customers as cus 
inner join orders as o on o.customer_id = cus.Customer_id
 


select customer_id,count(quantity),sum(quantity)
from Orders group by customer_id

 
 
-- from ,join, where , group by  , having , select , order by 



##2025 - April 13 


use sql_course

-- order -> customer 

-- Employees ( left table ) -- Departments ( right table ) 

-- Departments ( left table ) -- Employees ( right table )


-- left join 
-- or right join

-- LEFT JOIN and RIGHT JOIN are mirror images.
-- Anything you can do with a RIGHT JOIN, you can do with a LEFT JOIN 
-- â€” just switch table positions.


-- ðŸŽ¯ So, Why Use RIGHT JOIN at All?
-- Mostly readability or convention. If your primary table is on the right, 
-- and you want to include all rows from it, you might choose RIGHT JOIN.

-- But technically, LEFT JOIN is enough â€” just switch the table order.


CREATE TABLE emp_details (
    emp_id INT PRIMARY KEY,
    name VARCHAR(100)
);

CREATE TABLE salaries (
    salary_id INT PRIMARY KEY,
    emp_id INT,
    amount INT
);

INSERT INTO emp_details VALUES (1, 'ABC'), (2, 'PQR'), (3, 'LMN');
INSERT INTO salaries VALUES (1, 1, 50000), (2, 2, 60000), (3, NULL, 70000);


select * from emp_details;
select * from salaries;

-- find all emp infomations with their salary 
-- if salery is not mention then asssing null

select emp.emp_id,emp.name,s.salary_id,s.amount
from emp_details as emp 
left join salaries as s on s.emp_id = emp.emp_id;

select emp.emp_id,emp.name,s.salary_id,s.amount
from salaries as s 
right join emp_details as emp on emp.emp_id = s.emp_id

select emp.*,s.*
from salaries as s 
right join emp_details as emp on emp.emp_id = s.emp_id


-- Inner Join  or join
select * from emp_details;
select * from salaries;

select emp.* , s.*
from emp_details as emp 
inner join salaries as s on s.emp_id = emp.emp_id


-- quiz_app.loan_data

select * from quiz_app.loan_data

select avg(person_income ) 
from quiz_app.loan_data

select person_education ,person_income
from quiz_app.loan_data 
group by person_education , person_income

select person_education , avg(person_income)
from quiz_app.loan_data 
group by person_education


select person_education ,avg(person_income),count(loan_amnt)
from quiz_app.loan_data 
group by person_education


select person_education ,avg(person_income),count(loan_amnt)
from quiz_app.loan_data 
group by person_education having count(loan_amnt) >22000
