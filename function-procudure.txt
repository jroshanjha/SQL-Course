
use course;

CREATE TABLE if not exists departments (
  dept_id INT PRIMARY KEY,
  dept_name VARCHAR(50)
);

CREATE TABLE if not exists employees (
  emp_id INT PRIMARY KEY,
  emp_name VARCHAR(50),
  salary DECIMAL(10,2),
  join_date DATE,
  dept_id INT,
  FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);


INSERT INTO departments VALUES
(1, 'Engineering'),
(2, 'Marketing'),
(3, 'Finance');

INSERT INTO employees VALUES
(101, 'Alice', 80000, '2022-01-15', 1),
(102, 'Bob', 75000, '2021-11-05', 1),
(103, 'Charlie', 65000, '2023-02-20', 2),
(104, 'Diana', 90000, '2020-06-10', 3),
(105, 'Ethan', 72000, '2019-09-25', 1),
(106, 'Fiona', 58000, '2021-04-30', 2);


select * from departments;
select * from employees;

-- MySQL functions are pre-defined or user-defined blocks of code that 
-- perform specific tasks and return a single value.


drop function if exists calculate_bonus;
DELIMITER $$
CREATE FUNCTION calculate_bonus(salary DECIMAL(10,2))
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
    DECLARE bonus DECIMAL(10,2);
    SET bonus = salary * 0.10;
    RETURN bonus;
END$$
DELIMITER ;

SELECT emp_name, salary, calculate_bonus(salary) AS bonus
FROM employees;

DELIMITER $$


CREATE PROCEDURE update_salary (
    IN p_emp_id INT,
    IN p_percentage DECIMAL(5,2)
)
BEGIN
    UPDATE employees
    SET salary = salary + (salary * p_percentage / 100)
    WHERE emp_id = p_emp_id;
END $$
DELIMITER ;

CALL update_salary(1, 5);



drop procedure if exists get_employee_salary;
delimiter $$
CREATE PROCEDURE get_employee_salary (
    IN p_emp_id INT,
    OUT p_salary DECIMAL(10,2)
)
BEGIN
    SELECT salary INTO p_salary
    FROM employees
    WHERE emp_id = p_emp_id;
END$$

DELIMITER ;

CALL get_employee_salary(2, @emp_salary);
SELECT @emp_salary;

-- ✅ 2. Create the Sales Table
DROP TABLE IF EXISTS sales_data;

CREATE TABLE sales_data (
    id INT AUTO_INCREMENT PRIMARY KEY,
    city VARCHAR(100),
    customer_name VARCHAR(100),
    sales_amount DECIMAL(10,2),
    sales_date DATE
);

-- Insert 100 Dummy Records
-- Insert dummy data using a stored procedure
DELIMITER $$

CREATE PROCEDURE insert_dummy_sales()
BEGIN
    DECLARE i INT DEFAULT 1;
    DECLARE cities VARCHAR(100);

    WHILE i <= 100 DO
        SET cities = ELT(FLOOR(1 + RAND() * 10),
                         'Mumbai', 'Delhi', 'Bengaluru', 'Chennai', 'Hyderabad',
                         'Kolkata', 'Pune', 'Ahmedabad', 'Jaipur', 'Lucknow');
                         
        INSERT INTO sales_data (city, customer_name, sales_amount, sales_date)
        VALUES (
            cities,
            CONCAT('Customer_', i),
            ROUND(RAND() * 10000, 2),
            CURDATE() - INTERVAL FLOOR(RAND() * 365) DAY
        );
        SET i = i + 1;
    END WHILE;
END$$

DELIMITER ;

-- Call the procedure to insert dummy data
CALL insert_dummy_sales();

-- ✅ 4. Create Function to Get Sales of a Specific City
DELIMITER $$

CREATE FUNCTION get_city_sales(city_name VARCHAR(100))
RETURNS DECIMAL(15,2)
DETERMINISTIC
BEGIN
    DECLARE total_sales DECIMAL(15,2);
    
    SELECT SUM(sales_amount) INTO total_sales
    FROM sales_data
    WHERE city = city_name;
    
    RETURN IFNULL(total_sales, 0.00);
END$$

DELIMITER ;

-- ✅ 5. Test the Function
SELECT get_city_sales('Mumbai') AS mumbai_sales;
SELECT get_city_sales('Delhi') AS delhi_sales;


-- View + Function Together (If Needed)
DELIMITER $$

CREATE FUNCTION total_dept_salary(dept INT)
RETURNS DECIMAL(12,2)
DETERMINISTIC
BEGIN
    DECLARE total DECIMAL(12,2);
    SELECT SUM(salary) INTO total FROM employee_overview WHERE dept_id = dept;
    RETURN IFNULL(total, 0.00);
END$$

DELIMITER ;

-- Usage:
SELECT total_dept_salary(3);


-- Use a Stored Procedure to Return Rows
DELIMITER $$

CREATE PROCEDURE employee_overview_proc(IN dept INT)
BEGIN
    SELECT * FROM employee_overview WHERE dept_id = dept;
END$$

DELIMITER ;

CALL employee_overview_proc(3);

-- Using Functions 
SELECT * returns multiple rows → ❌ Not allowed in a function
No RETURN statement → ❌ Function must return a value

DELIMITER $$

CREATE FUNCTION employee_count_by_dept(x INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE emp_count INT;
    SELECT COUNT(*) INTO emp_count
    FROM employee_overview
    WHERE dept_id = x;
    
    RETURN emp_count;
END$$

DELIMITER ;

SELECT employee_count_by_dept(2) AS emp_total;


-- 📝 Quick Recap of Examples
-- ✅ Email format validation function
-- ✅ Function to get department name
-- ✅ Procedure to promote employee with audit logging
-- ✅ Bulk salary adjustment for a department
-- ✅ Employee transfer with logging

DELIMITER $$

# -- Function: Validate Email Format
CREATE FUNCTION is_valid_email(email VARCHAR(255))
RETURNS TINYINT
DETERMINISTIC
BEGIN
    DECLARE result TINYINT;
    IF email REGEXP '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' THEN
        SET result = 1;
    ELSE
        SET result = 0;
    END IF;
    RETURN result;
END $$

DELIMITER ;
SELECT 'test@example.com' AS email, is_valid_email('test@example.com') AS is_valid;

DELIMITER $$

# ---- Function: Get Department Name
CREATE FUNCTION get_dept_name(p_dept_id INT)
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
    DECLARE dept_name VARCHAR(50);
    SELECT dept_name INTO dept_name
    FROM departments
    WHERE dept_id = p_dept_id;
    RETURN dept_name;
END $$

DELIMITER ;

SELECT get_dept_name(1) AS dept;



# -- Procedure: Promote Employee
-- Increase salary by a fixed amount and log the promotion in an audit table.

CREATE TABLE promotions_audit (
  id INT AUTO_INCREMENT PRIMARY KEY,
  emp_id INT,
  old_salary DECIMAL(10,2),
  new_salary DECIMAL(10,2),
  promoted_on DATETIME
);
DELIMITER $$

CREATE PROCEDURE promote_employee (
    IN p_emp_id INT,
    IN p_raise DECIMAL(10,2)
)
BEGIN
    DECLARE v_old_salary DECIMAL(10,2);
    DECLARE v_new_salary DECIMAL(10,2);

    SELECT salary INTO v_old_salary
    FROM employees
    WHERE emp_id = p_emp_id;

    SET v_new_salary = v_old_salary + p_raise;

    UPDATE employees
    SET salary = v_new_salary
    WHERE emp_id = p_emp_id;

    INSERT INTO promotions_audit(emp_id, old_salary, new_salary, promoted_on)
    VALUES (p_emp_id, v_old_salary, v_new_salary, NOW());
END $$

DELIMITER ;


CALL promote_employee(2, 5000);  -- give Bob a $5000 raise
SELECT * FROM promotions_audit;



# -- Bulk Salary Adjustment by Department
-- Increase all employees’ salaries in a given department by a percentage.


DELIMITER $$

CREATE PROCEDURE adjust_department_salary (
    IN p_dept_id INT,
    IN p_percentage DECIMAL(5,2)
)
BEGIN
    UPDATE employees
    SET salary = salary + (salary * p_percentage / 100)
    WHERE dept_id = p_dept_id;
END $$

DELIMITER ;

CALL adjust_department_salary(1, 10);  -- 10% increase in Engineering department


-- Procedure: Transfer Employee to Another Department
-- Change an employee’s department and record the move in an audit table.

CREATE TABLE dept_transfers (
  id INT AUTO_INCREMENT PRIMARY KEY,
  emp_id INT,
  old_dept INT,
  new_dept INT,
  transfer_date DATETIME
);

DELIMITER $$

CREATE PROCEDURE transfer_employee (
    IN p_emp_id INT,
    IN p_new_dept_id INT
)
BEGIN
    DECLARE v_old_dept INT;

    SELECT dept_id INTO v_old_dept
    FROM employees
    WHERE emp_id = p_emp_id;

    UPDATE employees
    SET dept_id = p_new_dept_id
    WHERE emp_id = p_emp_id;

    INSERT INTO dept_transfers(emp_id, old_dept, new_dept, transfer_date)
    VALUES (p_emp_id, v_old_dept, p_new_dept_id, NOW());
END $$

DELIMITER ;


CALL transfer_employee(3, 3);  -- Move Charlie to Finance
SELECT * FROM dept_transfers;



-- Employee Performance and Payroll Management

-- 📁 1. Database Schema
-- Departments Table
CREATE TABLE departments (
  dept_id INT PRIMARY KEY,
  dept_name VARCHAR(50)
);

-- Employees Table
CREATE TABLE employees (
  emp_id INT PRIMARY KEY,
  emp_name VARCHAR(50),
  dept_id INT,
  salary DECIMAL(10,2),
  join_date DATE,
  rating DECIMAL(3,2)
);

-- Payroll Log Table
CREATE TABLE payroll_log (
  log_id INT AUTO_INCREMENT PRIMARY KEY,
  emp_id INT,
  old_salary DECIMAL(10,2),
  new_salary DECIMAL(10,2),
  log_time DATETIME
);

-- 📥 2. Insert Dummy Data
INSERT INTO departments VALUES
(1, 'Engineering'), (2, 'HR'), (3, 'Finance');

INSERT INTO employees VALUES
(101, 'Alice', 1, 70000, '2020-01-10', 4.5),
(102, 'Bob', 1, 65000, '2021-06-15', 3.2),
(103, 'Charlie', 2, 50000, '2019-03-25', 4.8),
(104, 'Diana', 3, 90000, '2018-11-01', 4.9);


-- Bonus Calculation
-- Returns bonus based on performance rating.


DELIMITER $$

CREATE FUNCTION calculate_bonus(rating DECIMAL(3,2), salary DECIMAL(10,2))
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
  DECLARE bonus DECIMAL(10,2);
  IF rating >= 4.5 THEN
    SET bonus = salary * 0.20;
  ELSEIF rating >= 3.5 THEN
    SET bonus = salary * 0.10;
  ELSE
    SET bonus = salary * 0.05;
  END IF;
  RETURN bonus;
END $$

DELIMITER ;
SELECT emp_name, calculate_bonus(rating, salary) AS bonus FROM employees;

-- Update Salary with Bonus & Log

DELIMITER $$

CREATE PROCEDURE update_salary_with_bonus(IN p_emp_id INT)
BEGIN
  DECLARE v_salary DECIMAL(10,2);
  DECLARE v_rating DECIMAL(3,2);
  DECLARE v_bonus DECIMAL(10,2);
  DECLARE v_new_salary DECIMAL(10,2);

  SELECT salary, rating INTO v_salary, v_rating FROM employees WHERE emp_id = p_emp_id;

  SET v_bonus = calculate_bonus(v_rating, v_salary);
  SET v_new_salary = v_salary + v_bonus;

  UPDATE employees SET salary = v_new_salary WHERE emp_id = p_emp_id;

  INSERT INTO payroll_log(emp_id, old_salary, new_salary, log_time)
  VALUES (p_emp_id, v_salary, v_new_salary, NOW());
END $$

DELIMITER ;

CALL update_salary_with_bonus(101);

-- Employee Payroll Summary
CREATE OR REPLACE VIEW vw_payroll_summary AS
SELECT 
  e.emp_id,
  e.emp_name,
  d.dept_name,
  e.salary,
  e.rating,
  calculate_bonus(e.rating, e.salary) AS estimated_bonus
FROM employees e
JOIN departments d ON e.dept_id = d.dept_id;

SELECT * FROM vw_payroll_summary;

-- Top Performers

CREATE OR REPLACE VIEW vw_top_performers AS
SELECT emp_id, emp_name, rating, salary
FROM employees
WHERE rating >= 4.5;
