#2025 - Mar -2 

-- Table A ( Product ) 
-- pro_id, name, category, price , date

-- Table B ( Customer ) 
-- Cus_id , name , phone, email ,address

-- Table C ( order or Purchace ) 
-- order_id, cus_Id, pro_Id,price, created_at 


-- Testing -- 
use sql_course;
# Example 1: Creating a Temporary Table Manually
CREATE TEMPORARY TABLE temp_employees1 (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    department VARCHAR(50),
    salary DECIMAL(10,2)
);
-- Show tables 
show tables
-- Get data form temporary tables
select * from temp_employees1

-- Example 2: Creating a Temporary Table Based on Another Table
CREATE TEMPORARY TABLE temp_orders AS
SELECT order_id, customer_id, total_amount
FROM orders
WHERE order_date > '2024-01-01';

-- Example 3: Inserting Data into a Temporary Table
INSERT INTO temp_employees1 (id, name, department, salary)
VALUES (1, 'John Doe', 'IT', 75000.00);

# Example 4: Dropping a Temporary Table (if needed before session ends)
DROP TEMPORARY TABLE IF EXISTS temp_employees;


-- How to Create View 
create view calculation as 
select (loan_amnt + 100) as total_amt,(loan_amnt - 100) as decreased_amnt ,
(loan_amnt * 2 ) as multiply, (loan_amnt / 10) as divided , 
(loan_amnt % 10 ) as modular 
from quiz_app.loan_data

-- drop view person_view

-- select data form quiz_app(database) loan_data (table)
SELECT * FROM quiz_app.loan_data

CREATE VIEW person_view AS
SELECT * FROM quiz_app.loan_data
WHERE loan_amnt > 20000;

-- Get data from View 
select * from person_view

create table person_view (
t_id int primary key,
name varchar(30) not null,
email varchar(50) not null,
phone int(10) not null
)
-- we 


-- comparison(=,>,>=,<=,<>,!=,!<,!>) only for numerical 


-- Find the record for person_income more then or equal 10000
select * from loan_data where person_income > 10000 or person_income = 10000
select * from loan_data where (person_income > 10000 or person_income = 10000)
select * from loan_data where person_income >= 10000;

-- Write sql query for loan_amnt not equal 35000 with order by person age asc
select * from loan_data where loan_amnt != 35000 order by person_age limit 100;
select * from loan_data where loan_amnt <> 35000 order by person_age limit 100;

-- Write sql query for loan_amnt not equal 35000 and 2000 with order by person age asc
select * from loan_data where (loan_amnt != 2000 and loan_amnt!=35000) 
order by person_age  limit 100;

describe loan_data
-- !<,!>
-- write sql query for retrive person income not equal 1000 and should be less than 2000
select * from loan_data where person_income !=1000 and person_income <2000

-- write sql query for retrive person income not equal 8000 and should be less than 10000
select * from loan_data where person_income !=8000 and person_income <10000

-- logical(and,all,any,between,exists,in,like,not,or,some)

--  And , Or , not , in, not in
select * from loan_data where person_income > 20000 and person_income < 50000

select * from loan_data where person_income > 20000 and person_income < 50000 or person_income !=24121
select * from loan_data where (person_income > 20000 and person_income < 50000) or person_income !=24121

-- Write sql query for loan_amnt not equal 35000 or 2000 with order by person age asc
select * from loan_data where (loan_amnt != 2000 or loan_amnt!=35000) 
select * from loan_data where (loan_amnt != 35000 or loan_amnt!=2500) 

-- Write sql query for loan_amnt not equal 35000 and 2500 with order by person age asc
select * from loan_data where (loan_amnt != 2500 and loan_amnt!=35000) 
 

select * from loan_data where person_income > 20000 and (person_income < 50000 or person_income !=24121)
select * from loan_data where person_income > 20000 or person_income < 50000 or person_income !=24121
select * from loan_data where person_income > 20000 or person_income < 50000 and person_income !=24121

-- Write sql query for retrive records for person loan amount 35000 and 2500
select * from loan_data where loan_amnt = 35000 or loan_amnt = 2500

select * from loan_data where loan_amnt in(35000, 2500)

-- NOT
select * from loan_data where loan_amnt not in(35000, 2500)

select * from loan_data where (loan_amnt != 2000 and loan_amnt!=35000)

-- in or not in 

-- And 
-- ( conditions)  
-- TRUE vs TRUE = TRUE 
-- TRUE vs FALSAE = FALSE 
-- FALSE VS FALSE = FALSE 
-- FALSE VS TURE = FALSE 

-- or 
-- ( conditions)  
-- TRUE vs TRUE = TRUE 
-- TRUE vs FALSAE = TRUE
-- FALSE VS FALSE = FALSE 
-- FALSE VS TURE = TRUE

-- NOT 
-- ( conditions)  
-- TRUE = FALSE
-- FALSAE = TRUE
