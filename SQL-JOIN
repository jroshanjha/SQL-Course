#2025 - April 05 

-- Join 
-- Combine two or more tables to get informations 

-- Like 
-- Customer  , Product and Orders
-- Author , Books 
-- teacher , Students 
-- Course , Purchase , Students 

-- Left join , Right Join , Full outer join ( left join union Right join ) 
-- Inner join ( join ) and self join, cross join 

-- Number of column should be same
Union - Combine rows from both queries. No duplicates.
Intersect - keep only rows that are common in both queries.
Except- keep rows only from left query that are not present in right query.

-- Union
-- table -A  
-- 1
-- 2 
-- 3 
-- 4 
-- 5 
-- Table -B
-- 7
-- 4
-- 8
-- 5 
( A union B ) -> 1,2,3,4,5,7,8
( A union all B) -> 1,2,3,4,5,7,4,8,5

INTERSECT -> 4, 5
except ->  1 , 2 , 3

-- Ralationships 
-- One to One  
-- One to Many 
-- Many to One 
-- Many to Many 


-- One to One 
-- eg.. 1 Customer -> customer support 
-- 1:1 session 

-- Students ( id, name ,course ) 
-- project ( id, stu_id, data, submited_date )


1. One-to-One (1:1)
Each row in Table A relates to one and only one row in Table B.

ðŸ“Œ Example: Person â†” Passport

Person_ID	Name	Passport_ID	Passport_Number
1	Alice	101	X1234567
2	Bob	102	Y9876543
3	Charlie	103	Z5432167
4	Diana	104	A1357924
5	Edward	105	B2468135


2. One-to-Many (1:N)
One row in Table A can relate to many rows in Table B.

ðŸ“Œ Example: Customer â†’ Orders  or Teacher have teech multiple course or Studenrt buy multiple coruse
Customer_ID	Name	Order_ID	Product
1	John	201	Laptop
1	John	202	Mouse
2	Alice	203	Monitor
3	Michael	204	Keyboard
3	Michael	205	USB Cable


3. Many-to-One (N:1)
Many rows in Table A relate to one row in Table B (inverse of 1:N).

ðŸ“Œ Example: Employee â†’ Department or ( Employee have one manager ) or  ( Many student have same course ) or ( Many customer buy same product ) 

Employee_ID	Name	Dept_ID	Department
101	Rahul	10	HR
102	Sneha	20	IT
103	Arjun	20	IT
104	Kavya	10	HR
105	Sameer	30	Finance


4. Many-to-Many (M:N)
Multiple rows in Table A relate to multiple rows in Table B using a junction table.

ðŸ“Œ Example: Student â†” Courses

Student_ID	Name	Course_ID	Course_Name
1	Aanya	301	Math
1	Aanya	302	Physics
2	Rohan	301	Math
2	Rohan	303	Chemistry
3	Meera	302	Physics




use sql_course;

use quiz_app
select * from quiz_app.loan_data;

-- total recored for each categorie
select person_education , count(person_education)
from loan_data group by person_education;

select count(person_education)
from loan_data ;

select person_education , count(person_education)
from loan_data group by person_education;

select person_education , count(person_education) , 
round(sum(loan_amnt),2) as total_sum, round(avg(loan_amnt),2) as average_amount
from loan_data group by person_education having count(person_education)>22000
order by average_amount desc limit 1 offset 1


-- Join ( column ) 

select * from customers;
select * from orders ;
select * from products

-- INNER 
select cus.*,o.*
from Customers cus 
inner join Orders o on o.customer_id = cus.Customer_id


-- total numer of records for each customer
select cus.customer_id,count(o.order_id)
from Customers cus 
inner join Orders o on o.customer_id = cus.Customer_id
group by cus.customer_id

--  Find total order and sum of quantity for each product id
select o.product_id,count(o.order_id) , sum(quantity) as total_val
from Customers cus 
inner join Orders o on o.customer_id = cus.Customer_id
group by o.product_id 


--  Find total order and sum of quantity for each product id whose produt by more than 2 
select o.product_id,count(o.order_id) as total, sum(quantity) as total_val
from Customers cus 
inner join Orders o on o.customer_id = cus.Customer_id
group by o.product_id having count(o.order_id) > 2


-- self join

drop table Stu;
-- Create the Students table
CREATE TABLE Stu (
    stu_id INT PRIMARY KEY,
    Stu_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    salary DECIMAL(10, 2),
    teacher_id INT,
    mentor_id int
);

-- Insert top ten records
INSERT INTO Stu (stu_id, Stu_name, email, salary, teacher_id) VALUES
(1, 'Alice Smith', 'alice.smith@example.com', 50000.00, 101),
(2, 'Bob Johnson', 'bob.j@example.com', 55000.00, 102),
(3, 'Charlie Brown', 'charlie.b@example.com', 48000.00, 101),
(4, 'Diana Prince', 'diana.p@example.com', 60000.00, 103),
(5, 'Eve Adams', 'eve.a@example.com', 52000.00, 102),
(6, 'Frank White', 'frank.w@example.com', 49000.00, 101),
(7, 'Grace Lee', 'grace.l@example.com', 58000.00, 103),
(8, 'Harry Potter', 'harry.p@example.com', 51000.00, 104),
(9, 'Ivy Green', 'ivy.g@example.com', 53000.00, 102),
(10, 'Jack Black', 'jack.b@example.com', 56000.00, 104);

truncate stu;

-- Insert top ten records
INSERT INTO Stu (stu_id, Stu_name, email, salary, teacher_id, mentor_id) VALUES
(1, 'Alice Smith', 'alice.smith@example.com', 50000.00, 101, NULL), -- Alice is a top-level mentor
(2, 'Bob Johnson', 'bob.j@example.com', 55000.00, 102, NULL),    -- Bob is a top-level mentor
(3, 'Charlie Brown', 'charlie.b@example.com', 48000.00, 101, 1), -- Charlie is mentored by Alice (stu_id 1)
(4, 'Diana Prince', 'diana.p@example.com', 60000.00, 103, NULL),  -- Diana is a top-level mentor
(5, 'Eve Adams', 'eve.a@example.com', 52000.00, 102, 2),     -- Eve is mentored by Bob (stu_id 2)
(6, 'Frank White', 'frank.w@example.com', 49000.00, 101, 1),    -- Frank is mentored by Alice (stu_id 1)
(7, 'Grace Lee', 'grace.l@example.com', 58000.00, 103, 4),     -- Grace is mentored by Diana (stu_id 4)
(8, 'Harry Potter', 'harry.p@example.com', 51000.00, 104, NULL), -- Harry is a top-level mentor
(9, 'Ivy Green', 'ivy.g@example.com', 53000.00, 102, 2),     -- Ivy is mentored by Bob (stu_id 2)
(10, 'Jack Black', 'jack.b@example.com', 56000.00, 104, 8);    -- Jack is mentored by Harry (stu_id 8)


-- Self join 
select * from stu;

select s1.stu_id,s1.Stu_name,s1.salary , s2.salary,s2.teacher_id,s2.mentor_id
from Stu as s1 
left join Stu as s2 on s2.mentor_id = s1.stu_id



select * from customers;
select * from orders ;
select * from products;

-- left , left , left 
-- left , left , right 
-- right, right , right 
-- right , left , left 
-- inner , inner ,inner 

select cus.customer_id,cus.email,o.order_id,o.customer_id ,o.product_id, p.product_id,p.price
from customers cus 
join orders o on o.customer_id = cus.customer_id
left join products p on p.product_id = o.product_id

-- total order and total revenue for each product
select o.product_id,count(o.product_id), sum(p.price) ,avg(p.price) 
from customers cus 
join orders o on o.customer_id = cus.customer_id
left join products p on p.product_id = o.product_id
group by o.product_id

-- total order and total revenue for each customer
select o.customer_id,count(o.product_id),count(o.customer_id), sum(p.price) ,avg(p.price) 
from customers cus 
join orders o on o.customer_id = cus.customer_id
left join products p on p.product_id = o.product_id
group by o.customer_id



