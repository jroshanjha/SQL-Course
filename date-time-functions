#2025 05 - 09 

  
use sql_course; 

show tables;

select * from customers;

# ðŸ“† Current Date and Time
# -- Function	Description	Example	Output
NOW()	Current date and time	SELECT NOW();	2025-04-24 15:30:45 <br>
CURDATE()	Current date	SELECT CURDATE();	2025-04-24  <br>
CURTIME()	Current time	SELECT CURTIME();	15:30:45  <br>
SYSDATE()	Current date/time (executed when retrieved)	SELECT SYSDATE();	2025-04-24 15:30:45  <br>
UTC_DATE()	Current UTC date	SELECT UTC_DATE();	2025-04-24  <br>
UTC_TIME()	Current UTC time	SELECT UTC_TIME();	09:30:45  <br>
UTC_TIMESTAMP()	Current UTC date & time	SELECT UTC_TIMESTAMP();	2025-04-24 09:30:45 <br>

SELECT NOW();
SELECT UTC_TIMESTAMP();
SELECT SYSDATE();

select dteday- now() from bikeindia;

SELECT CURDATE();

select dteday- CURDATE() , CURDATE()-dteday from bikeindia;

SELECT CURTIME();

select * from bikeindia  

-- âœ… SYSDATE()
-- Value is evaluated at the exact time the function is executed.

-- If used in a query that takes time (e.g., processing many rows), SYSDATE() might return slightly different times for different rows.

-- âœ… NOW()
-- Value is constant during the entire execution of the query (or transaction, in some cases).
-- Useful when you want a consistent timestamp across multiple rows in a query.

CREATE TABLE test_date (
    id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

insert into test_date(id) values(101),(102)

select * from test_date



# ðŸ•“ Extracting Parts of Date/Time
# --Function	Description	Example	Output

YEAR(date)	Year	SELECT YEAR('2025-04-24');	2025  <br>
MONTH(date)	Month	SELECT MONTH('2025-04-24');	4   <br>
DAY(date) / DAYOFMONTH(date)	Day of month	SELECT DAY('2025-04-24');	24  <br> 
DAYOFWEEK(date)	Sunday=1 to Saturday=7	SELECT DAYOFWEEK('2025-04-24');	5  <br>
DAYOFYEAR(date)	Day of the year	SELECT DAYOFYEAR('2025-04-24');	114  <br>
HOUR(time)	Hour	SELECT HOUR('15:30:45');	15   <br>
MINUTE(time)	Minute	SELECT MINUTE('15:30:45');	30  <br>
SECOND(time)	Second	SELECT SECOND('15:30:45');	45  <br>
WEEK(date)	Week number	SELECT WEEK('2025-04-24');	17  <br>
WEEKDAY(date)	Monday=0 to Sunday=6	SELECT WEEKDAY('2025-04-24');	3 <br>
QUARTER(date)	Quarter of year	SELECT QUARTER('2025-04-24');	2  <br>

SELECT YEAR('2022-04-24'),year(now()),year(UTC_TIMESTAMP());

SELECT month('02-04-2022'),month(now()),month(UTC_TIMESTAMP());

select DAY(now()) ,DAYOFMONTH(now()) , day(UTC_TIMESTAMP());

SELECT DAYOFWEEK('2025-04-24'),dayofweek(now()),WEEKDAY('2025-04-24'),weekday(now());

select * from bikeindia 

select QUARTER(str_to_date(dteday,'%y-%m-%d')),avg(atemp) as average,max(atemp) as maximum from bikeindia
where year(str_to_date(dteday,'%y-%m-%d')) in(2018)
group by QUARTER(str_to_date(dteday,'%y-%m-%d'))

-- DATE_FORMAT(date, format)
--  DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i');



select * from quiz_app.loan_data

select person_income,round(sqrt(person_income),2) as same_scale from quiz_app.loan_data

select pow(287.13,2) => 82443



use sql_course; 

select * from bikeindia;
select * from retail_sales_dataset;

# ðŸ§® Date/Time Calculations
# -- Function	Description	Example	Output
DATEDIFF(d1, d2)	Days between two dates	SELECT DATEDIFF('2025-05-01', '2025-04-24');	7 <br> 
TIMEDIFF(t1, t2)	Time difference	SELECT TIMEDIFF('12:30:00', '11:45:00');	00:45:00   <br>

ADDDATE(date, INTERVAL n unit)	Add days or time	SELECT ADDDATE('2025-04-24', INTERVAL 7 DAY);	2025-05-01  <br>
SUBDATE(date, INTERVAL n unit)	Subtract days or time	SELECT SUBDATE('2025-04-24', INTERVAL 7 DAY);	2025-04-17 <br>
DATE_ADD(date, INTERVAL n unit)	Add interval (same as ADDDATE)	SELECT DATE_ADD('2025-04-24', INTERVAL 1 MONTH);	2025-05-24  <br>
DATE_SUB(date, INTERVAL n unit)	Subtract interval (same as SUBDATE)	SELECT DATE_SUB('2025-04-24', INTERVAL 1 MONTH);	2025-03-24 <br>

select * from sales_data;
SELECT DATEDIFF('2025-05-01', '2025-04-24');

SELECT TIMEDIFF('12:30:00', '11:45:00');

select `Order Date`, date_add(`Order Date`,interval 1 month) 
from sales_data;
SELECT ADDDATE('2025-04-24', INTERVAL 7 DAY);

select curdate() - (date_sub(curdate(),interval 5 day));

select `Order Date`,date_format(`Order Date`,"%Y-%m-%d"),
(date_sub(curdate(),interval 5 day)),
date_format(`Order Date`,"%Y-%m-%d") - (date_sub(curdate(),interval 5 day)),
DATEDIFF(date_format(`Order Date`,"%Y-%m-%d"),
(date_sub(curdate(),interval 5 day))),
DATEDIFF(date_format(`Order Date`,"%Y-%m-%d"),
(date_sub(curdate(),interval 5 day))) / 365 * 12 * 30
from sales_data;


use sql_course;
select * from bikeindia;
select * from retail_sales_dataset;
select * from sales_data;

-- Find the remainder when the order_id is divided by 5 in the orders table (use MOD).
-- Find the square root and square of each product's weight in the products table.
-- Find the day of the week (Monday, Tuesday, etc.) from the booking_date field in the bookings table.
-- Get only the time part (HH:MM:SS) from the created_at column in the logs table.
-- Find the difference in seconds between two timestamps: start_time and end_time.
-- Check if a date (delivery_date) falls on a weekend.
--  Calculate the number of months between start_date and end_date of all projects in the projects table.

select * from bikeindia;
select * from retail_sales_dataset;
select * from sales_data;

# ðŸ”€ Formatting and Conversion
# --Function	Description	Example	Output
DATE_FORMAT(date, format)	Format a date string	SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i');	2025-04-24 15:30 <br>
STR_TO_DATE(str, format)	Convert string to date	SELECT STR_TO_DATE('24-04-2025','%d-%m-%Y');	2025-04-24 <br>
TIME_FORMAT(time, format)	Format time	SELECT TIME_FORMAT('15:30:45', '%H:%i');	15:30 <br>
EXTRACT(unit FROM date)	Extract date part	SELECT EXTRACT(YEAR FROM '2025-04-24');	2025  <br>

SELECT now(),DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),DATE_FORMAT(NOW(), '%y-%m-%d %h:%i:%s');

-- Get only the time part (HH:MM:SS) from the created_at column in the logs table.

-- %M -> month name ( may ) 
-- %m -> montha number ( 5 ) 
-- %i -> minutes 
-- %I -> Hour number ( 12 hours time ) 
-- %p -> Am/Pm ( 12 hours time )
-- %r -> %h:%i:%s Am/Pm
select now(),date_format(now(),"%H:%i:%s") , date_format(now(),"%H:%I:%S")

select * from sales_data;
select `Order Date`,date_format(`Order Date`,'%Y-%d %H:%i:%s'),
date_format(`Order Date`,'%h:%i:%s %r') ,date_format(`Order Date`,'%h:%i:%s %p'), date_format(`Order Date`,'%d-%Y %H:%i:%s')
from sales_data;

SELECT TIME_FORMAT('15:30:45', '%H:%i'),time_format(`Order Date`,'%Y-%m-%d %H:%i') from sales_data

SELECT EXTRACT(YEAR FROM `Order Date`)  , EXTRACT(hour FROM `Order Date`)
from sales_data; 

SELECT STR_TO_DATE('12-05-2018 02:45:00 PM', '%d-%m-%Y %r');
SELECT STR_TO_DATE('12-05-2018 02:45:00 PM', '%d-%m-%Y %p');


-- LAST_DAY(date)	Last day of month	SELECT LAST_DAY('2025-04-24');	2025-04-30 <br>
-- TO_DAYS(date)	Days since year 0	SELECT TO_DAYS('2025-04-24');	750000+  <br>
-- FROM_DAYS(n)	Convert days to date	SELECT FROM_DAYS(750000);	2025-04-24 <br>
select * from sales_data;
describe sales_data;

select * from sales_data where `Order Date` between '2019-01-01' and '2019-02-28'

select date_format("2019-01-01","%d-%m"),date_format('01-01-2019','%d-%m'),str_to_date('2019-01-01','%d-%m')

-- select str_to_date(`Order Date`,'%y-%m-%d') from sales_data

select QUARTER(date_format(dteday,'%y-%m-%d')),avg(atemp) as average,max(atemp) as maximum from bikeindia
where year(date_format(dteday,'%y-%m-%d')) in(2018)
group by QUARTER(date_format(dteday,'%y-%m-%d'))


âœ… Understanding the Issue
STR_TO_DATE(dteday, '%y-%m-%d'):
Parses a string into a date using the given format. 
Ideal when dteday is stored as a string (e.g., '18-05-11').

DATE_FORMAT(dteday, '%y-%m-%d'):
Converts a date/datetime into a string, formatted accordingly. 
It's not meant for parsing or extracting meaningful date components like QUARTER() or YEAR().




-- Mean 
select sum(`Cost price`)/count(*),avg(`Cost price`) from sales_data;

-- mode  ( Categories ) 

select product,count(product) as total_rec from sales_data 
group by product order by total_rec desc


-- Median 
-- order valeus 
-- mid value 

select count(*) from sales_data;

with etc as (
select *,row_number() over( order by `Cost price`) as rn from sales_data 
-- order by `Cost price`
)

-- select case when count(*) % 2=0 then (count(*)/2) +1
-- else (count(*) + 1)/2 end as 'median'
-- from etc

select * from etc 
where rn in(
select case when count(*) % 2=0 then (count(*)/2) +1
else (count(*) + 1)/2 end as 'median'
from etc )
