## What is SQL?
  SQL (Structured Query Language) is a powerful language used to communicate with and manage data stored in relational databases. 
  It enables users to create, modify, and manipulate data structures and records. SQL is commonly employed to query, insert, update, 
  and delete records, as well as to design and alter the database itself. With its versatility, SQL can handle complex queries and 
  process large volumes of data, making it the most widely used language for managing databases across various applications.

## Key Functions of SQL:
  Data Querying: Retrieve data from a database using the SELECT statement.
  Data Manipulation: Perform operations like inserting (INSERT), updating (UPDATE), and deleting (DELETE) data.
  Data Definition: Define the structure of a database using Data Definition Language (DDL) commands like CREATE, ALTER, and DROP.
  Data Control: Control access and permissions to data using Data Control Language (DCL) commands like GRANT and REVOKE.

## Importance of SQL
  Industry Standard: SQL is the most widely used database language across the globe. Almost every relational database uses SQL for database queries and management.
  Scalability: SQL databases can handle a huge volume of data, making it essential for data-driven businesses and organizations.
  Cross-Platform Compatibility: SQL can be used on various platforms (Windows, Mac, Linux) and supports different database systems.
  Declarative Nature: SQL is a declarative language, which means that users specify what they want to do with data rather than how to do it, simplifying database management.
  Data Integrity: SQL helps enforce data integrity and security with features like constraints (e.g., PRIMARY KEY, FOREIGN KEY) and permissions (DCL commands).

## Applications of SQL

  Data Storage: SQL is the standard language used to store and manipulate data in relational databases.
  Data Definition: SQL is used to create, alter, and manage the structure of database objects such as tables, indexes, and views.
  Data Retrieval: SQL allows users to query and filter data from one or more tables, returning specific information.
  Data Manipulation: SQL can be used to update, insert, and delete records within a database.
  Data Security: SQL manages access controls, granting and revoking user permissions to maintain data security.
  Data Analysis: SQL supports data analysis by performing calculations, generating reports, and creating visualizations based on queried data.

## Advantages of SQL
  Ease of Use: SQL is user-friendly, with clear syntax that makes it easy to learn and understand. Writing queries and reading results is straightforward for users of all levels.
  Standardization: SQL is a standardized language, making it compatible with numerous database management systems. This ensures seamless data transfer across different systems.
  Scalability: SQL can handle large datasets and scale with growing business needs.
  Flexibility: SQL is highly adaptable, capable of handling both simple queries and complex data analysis.
  Security: SQL includes built-in security features such as user authentication, encryption, and access control, protecting data from unauthorized access.
  Performance: SQL is optimized for performance, allowing for quick query execution and real-time data retrieval, making it a valuable tool for decision-making.

## Limitations of SQL
  Complexity: SQL can be difficult to learn, especially for beginners unfamiliar with database design and programming concepts.
  Limited Support for Non-Relational Data: SQL is specifically designed for relational databases, which may not be ideal for managing non-relational data formats like JSON or XML.
  Cost: Some SQL-based database management systems are expensive to license, particularly for large-scale enterprise applications.
  Scalability Challenges: Although SQL is scalable, managing very large datasets with a centralized architecture can pose challenges and lead to performance bottlenecks.
  Performance Issues with Large Datasets: SQL may experience performance degradation when handling exceptionally large datasets or highly complex queries, potentially impacting user experience.

## Relational vs. Non-Relational Databases

1. Relational Databases (SQL):

    Data is stored in structured tables with relationships between different tables.
    Provides ACID (Atomicity, Consistency, Isolation, Durability) properties, ensuring data reliability and integrity.
    Suitable for complex querying and data analysis.
    More rigid schema with predefined structure.

2. Non-Relational Databases (NoSQL):

  Data is stored in a flexible format (key-value pairs, documents, columns, etc.).
  Offers scalability and better performance for unstructured or semi-structured data.
  Provides BASE (Basically Available, Soft state, Eventual consistency) for high availability and distributed systems.
  Used for high-throughput, large datasets with simple queries.

# SQL vs. NoSQL
  SQL (Relational Databases):
  Uses Structured Query Language (SQL) for database interaction.
  Suitable for applications where data relationships and integrity are crucial.
  Requires a fixed schema, making it less flexible in terms of data structure.
  NoSQL (Non-Relational Databases):
  No specific query language; interaction happens through APIs or other query models depending on the database (e.g., MongoDB uses MQLâ€”Mongo Query Language).
  Offers flexibility in schema design, allowing the data model to evolve over time.
  Ideal for high-velocity, high-volume data with minimal structure, such as real-time data processing or big data applications.

#Popular Database Management Systems (DBMS)
  MySQL:
  Open-source relational database known for its speed and reliability. Widely used in web applications.
  PostgreSQL:
  An advanced, open-source relational database with support for more complex operations such as JSON data types and advanced indexing.
  Microsoft SQL Server:
  A commercial relational database developed by Microsoft, offering robust integration with Microsoftâ€™s technology stack and enterprise-grade features.
  Oracle Database:
  A powerful relational database known for handling large-scale enterprise systems. It offers advanced security and performance features.
  MongoDB:
  A popular NoSQL database that stores data in JSON-like documents. Used in applications requiring fast, flexible, and scalable data storage

What is a VIEW in SQL?
A VIEW in SQL is a virtual table that is based on the result of a SQL query. It does not store data itself but provides a stored query that dynamically pulls data from underlying tables.

ðŸ”¹ Why Use a VIEW?
âœ… Simplifies complex queries â€“ You can store complex joins, filters, and aggregations in a view.
âœ… Enhances security â€“ You can restrict access to sensitive columns while allowing users to query specific data.
âœ… Improves maintainability â€“ Instead of writing long SQL queries repeatedly, you can reference a view.
âœ… Abstracts database schema changes â€“ If table structures change, you can update views without modifying application queries.

# Example 1: Creating a Temporary Table Manually
CREATE TEMPORARY TABLE temp_employees (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    department VARCHAR(50),
    salary DECIMAL(10,2)
);

# Example 2: Creating a Temporary Table Based on Another Table
CREATE TEMPORARY TABLE temp_orders AS
SELECT order_id, customer_id, total_amount
FROM orders
WHERE order_date > '2024-01-01';

# Example 3: Inserting Data into a Temporary Table
INSERT INTO temp_employees (id, name, department, salary)
VALUES (1, 'John Doe', 'IT', 75000.00);

# Example 4: Dropping a Temporary Table (if needed before session ends)
DROP TEMPORARY TABLE IF EXISTS temp_employees;


âœ… Compound Assignment Operators in SQL
Compound Operators (+=, -=, *=, /=, %=, &=, ^=, |=) are commonly found in programming languages like Python, Java, C++ but are not universally supported in SQL.
However, some RDBMS (like SQL Server, PostgreSQL) offer alternatives.

-- ðŸ”¹ Example Usage in SQL
-- ðŸ“Œ Increment a Column (+= Equivalent)

UPDATE emp_data
SET salary = salary + 1000 
WHERE department = 'IT';

-- ðŸ“Œ Decrement a Column (-= Equivalent)

UPDATE employees 
SET bonus = bonus - 500 
WHERE performance = 'low';

-- ðŸ“Œ Multiply a Column (*= Equivalent)
UPDATE products 
SET price = price * 1.10 
WHERE category = 'Electronics';

-- ðŸ“Œ Divide a Column (/= Equivalent)

UPDATE sales 
SET discount = discount / 2 
WHERE season = 'Winter';

-- ðŸ“Œ Use Modulus (%= Equivalent)
UPDATE students 
SET roll_number = roll_number % 5;

-- ðŸ”¹ Bitwise Compound Operators (&=, ^=, |=)
-- hese are mainly used in SQL Server for bitwise operations.
-- ðŸ“Œ Bitwise AND (&= Equivalent)

UPDATE users 
SET permissions = permissions & 4 
WHERE role = 'editor';

-- ðŸ“Œ Bitwise XOR (^= Equivalent)
UPDATE users 
SET flags = flags ^ 2 
WHERE status = 'active';


