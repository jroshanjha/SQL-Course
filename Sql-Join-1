

ðŸ§© Tables: Employees & Departments

-- Employees Table
CREATE TABLE Employees (
    Emp_ID INT PRIMARY KEY,
    Emp_Name VARCHAR(50),
    Dept_ID INT
);

INSERT INTO Employees VALUES
(1, 'Alice', 101),
(2, 'Bob', 102),
(3, 'Charlie', NULL),
(4, 'David', 104),
(5, 'Eve', 105);

-- Departments Table
CREATE TABLE Departments (
    Dept_ID INT PRIMARY KEY,
    Dept_Name VARCHAR(50)
);

INSERT INTO Departments VALUES
(101, 'HR'),
(102, 'IT'),
(103, 'Finance'),
(106, 'Marketing');

ðŸ”¹ 1. INNER JOIN (only matching records)

SELECT e.Emp_Name, d.Dept_Name
FROM Employees e
JOIN Departments d ON e.Dept_ID = d.Dept_ID;

ðŸ”¹ 2. LEFT JOIN (all from left + matches from right)
SELECT e.Emp_Name, d.Dept_Name
FROM Employees e
LEFT JOIN Departments d ON e.Dept_ID = d.Dept_ID;

ðŸ”¹ 3. RIGHT JOIN (all from right + matches from left)
SELECT e.Emp_Name, d.Dept_Name
FROM Employees e
RIGHT JOIN Departments d ON e.Dept_ID = d.Dept_ID;

ðŸ”¹ 4. FULL OUTER JOIN (all from both sides)
-- Some databases (e.g., MySQL) donâ€™t support FULL OUTER JOIN directly.
-- Use UNION of LEFT and RIGHT JOIN.

SELECT e.Emp_Name, d.Dept_Name
FROM Employees e
LEFT JOIN Departments d ON e.Dept_ID = d.Dept_ID

UNION

SELECT e.Emp_Name, d.Dept_Name
FROM Employees e
RIGHT JOIN Departments d ON e.Dept_ID = d.Dept_ID;


ðŸ”¹ 5. SELF JOIN (join a table to itself)

CREATE TABLE Employees (
    Emp_ID INT PRIMARY KEY,
    Emp_Name VARCHAR(50),
    Manager_ID INT
);

INSERT INTO Employees VALUES
(1, 'Alice', NULL),
(2, 'Bob', 1),
(3, 'Charlie', 1),
(4, 'David', 2),
(5, 'Eve', 2);

ðŸ§ª Query: Who is managed by whom?
SELECT e.Emp_Name AS Employee, m.Emp_Name AS Manager
FROM Employees e
LEFT JOIN Employees m ON e.Manager_ID = m.Emp_ID;


ðŸ”¹ 6. CROSS JOIN (cartesian product)
SELECT e.Emp_Name, d.Dept_Name
FROM Employees e
CROSS JOIN Departments d;

