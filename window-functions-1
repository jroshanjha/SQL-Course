#2025 - 05 - 30 \ 31

use sql_course;

show tables

select * from bikeindia;
select * from data_loan;

-- Get max value from each purpose 
select purpose , max(`installment`) as m_inst, max(`revol.util`) as m_revol
from data_loan 
group by purpose

select * from bikeindia;
select * from data_loan;
select * from emp_data;
select * from salaries;
select * from quiz_app.loan_data;
select * from retail_sales_dataset;

# üîç 1. ROW_NUMBER()
-- Gives each row a unique sequential number within a partition.
SELECT 
    employee_id, department_id, salary,
    ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rank_val
FROM employees;

select * , row_number() over() as rn
from salaries;

select * , row_number() over(order by amount desc) as rn
from salaries;

select * from (
select purpose,installment,`revol.bal`,
row_number() over(partition by purpose order by `revol.bal` desc ) as rn
from data_loan )  as common_val 
where rn <=10


# üîç 2. RANK()
-- Ranks rows with the same value sharing the same rank, but gaps are left.

SELECT 
    employee_id, salary,
    RANK() OVER (ORDER BY salary DESC) AS salary_rank
FROM employees;


# üîç 3. DENSE_RANK()
-- Same as RANK() but no gaps in rank values.

SELECT 
    employee_id, salary,
    DENSE_RANK() OVER (ORDER BY salary DESC) AS dense_rank_val
FROM employees;


select * from quiz_app.loan_data;

select * from (
select person_education, person_income,loan_amnt,
row_number() over( partition by person_education order by loan_amnt desc ) as rows_number,
rank() over( partition by person_education order by loan_amnt desc ) as rank_number,
dense_rank() over( partition by person_education order by loan_amnt desc ) as unique_rank_number
from quiz_app.loan_data ) as etc 
where rows_number <=10


# üîç 5. LAG()
-- Returns the value of a previous row in the same result set.
SELECT 
    employee_id, salary,
    LAG(salary) OVER (ORDER BY employee_id) AS previous_salary
FROM employees;


# üîç 6. LEAD()
-- Returns the value of a following row.
SELECT 
    employee_id, salary,
    LEAD(salary) OVER (ORDER BY employee_id) AS next_salary
FROM employees;

select * from bikeindia;

SELECT 
    dteday, temp, atemp,
    LAG(dteday) OVER (ORDER BY temp) AS previous_temp
FROM bikeindia;

SELECT 
    dteday, temp, atemp,
    LAG(dteday,2) OVER (ORDER BY temp) AS previous_temp
FROM bikeindia;

select * from (
SELECT 
    dteday, temp, atemp,
    LAG(dteday) OVER (ORDER BY temp) AS previous_temp
FROM bikeindia ) as etc
-- where dteday in( adddate(previous_temp,interval 1 day));
where datediff(date_format(dteday,'%Y-%m-%d'),date_format(previous_temp,'%Y-%m-%d')) = 1;


SELECT 
    dteday, temp, atemp,
    Lead(dteday) OVER (ORDER BY temp) AS next_temp
FROM bikeindia;

SELECT 
    dteday, temp, atemp,
    Lead(dteday,2) OVER (ORDER BY temp) AS next_temp
FROM bikeindia;

select * from (
SELECT 
    dteday, temp, atemp,
    Lead(dteday) OVER (ORDER BY temp) AS next_temp
FROM bikeindia ) as etc
where date_add(dteday,interval 1 day) = next_temp


select * from retail_sales_dataset;

-- Get all product who's order date have equal to deliver date
select * from (
select Date,`Product Category`,`Price per Unit` , `Total Amount`,
lead(Date) over(partition by`Product Category` order by Date) as delivery_date,
rank() over(partition by`Product Category` order by Date) as rn
from retail_sales_dataset ) as etc 
where date_add(Date,interval 1 day) = delivery_date 
and rn = 1;


select 
-- Date,`Product Category`,`Price per Unit` , `Total Amount`,
row_number(Date) as av
from retail_sales_dataset

# üîç 10. SUM() / AVG() / COUNT() OVER()
-- Can be used as rolling aggregates.
SELECT 
    Date,`Product Category`,`Price per Unit` , `Total Amount`,
    SUM(`Total Amount`) OVER () AS product_total
    from retail_sales_dataset

select SUM(`Total Amount`) from retail_sales_dataset;

with etc as (
SELECT 
    Date,`Product Category`,`Price per Unit` , `Total Amount`,
    -- SUM(`Total Amount`) OVER (partition by `Product Category` order by`Total Amount` desc) AS sum_total,
    SUM(`Total Amount`) OVER (partition by `Product Category`) AS product_total,
    avg(`Total Amount`) OVER (partition by `Product Category`) AS product_avg,
	count(`Total Amount`) OVER (partition by `Product Category`) AS total_count,
    row_number() over(partition by `Product Category`) as rn
FROM retail_sales_dataset)
select * from etc where rn = 1;


select * from (
Select `Product Category` ,`Price per Unit`,
Sum(`Price per Unit`) Over(Partition by `Product Category`) as Count_num,
Avg(`Price per Unit`) Over(Partition by `Product Category`) as Avg_num,
Count(`Price per Unit`) Over(Partition by `Product Category`) as Total_num,
row_number() Over(Partition by `Product Category`) as rn
From retail_sales_dataset ) as etc 
where rn = 1;


select sum(`Total Amount`) from retail_sales_dataset where `Product Category`='Beauty'
select count(`Total Amount`) from retail_sales_dataset where `Product Category`='Beauty'


# üîç 7. FIRST_VALUE() / LAST_VALUE()
Returns the first or last value in a window partition.

select * from (
SELECT 
    Date,`Product Category`,`Price per Unit` , `Total Amount`,
    FIRST_VALUE(`Total Amount`) OVER (partition by`Product Category` order by `Total Amount` desc) AS top_amount,
    first_VALUE(`Total Amount`) OVER (partition by`Product Category` order by `Total Amount`) AS bottom_amount,
    row_number() over (partition by`Product Category`) as rn
FROM retail_sales_dataset) as common_records 
where rn = 1;

select max(`Total Amount`) , min(`Total Amount`) from retail_sales_dataset;
-- select * from (
-- select *,rank() over () as rn from retail_sales_dataset where `Product Category` = 'Beauty') as etc 
-- order by rn desc limit 1 

select *,row_number() over () as rn from retail_sales_dataset where `Product Category` = 'Beauty'

